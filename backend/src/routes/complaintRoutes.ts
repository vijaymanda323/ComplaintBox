import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import Complaint from '../models/Complaint';

const router = express.Router();

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = 'uploads/';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx|txt/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only images, PDFs, and documents are allowed'));
    }
  }
});

// Submit complaint
router.post('/submit', upload.array('files', 5), async (req, res) => {
  try {
    const {
      userType,
      name,
      department,
      year,
      category,
      title,
      description
    } = req.body;

    // Validate required fields
    if (!userType || !department || !category || !title || !description) {
      return res.status(400).json({ 
        message: 'Missing required fields',
        required: ['userType', 'department', 'category', 'title', 'description']
      });
    }

    // Validate userType
    if (!['student', 'faculty'].includes(userType)) {
      return res.status(400).json({ 
        message: 'Invalid user type. Must be student or faculty' 
      });
    }

    // For faculty, name is required
    if (userType === 'faculty' && (!name || name.trim() === '')) {
      return res.status(400).json({ 
        message: 'Name is required for faculty complaints' 
      });
    }

    // For students, year is required
    if (userType === 'student' && (!year || year.trim() === '')) {
      return res.status(400).json({ 
        message: 'Year is required for student complaints' 
      });
    }

    // Handle file uploads
    const fileUrls: string[] = [];
    if (req.files && Array.isArray(req.files)) {
      fileUrls.push(...req.files.map((file: any) => `/uploads/${file.filename}`));
    }

    // Create complaint object (ID will be auto-generated by pre-save middleware)
    const complaintData: any = {
      userType,
      department,
      category,
      title: title.trim(),
      description: description.trim(),
      status: 'pending',
      submittedAt: new Date()
    };

    // Add optional fields based on user type
    if (name && name.trim() !== '') {
      complaintData.name = name.trim();
    }

    if (userType === 'student') {
      complaintData.year = year;
    }

    if (fileUrls.length > 0) {
      complaintData.fileUrls = fileUrls;
    }

    // Save to database (ID will be auto-generated)
    const complaint = new Complaint(complaintData);
    await complaint.save();

    res.status(201).json({
      message: 'Complaint submitted successfully',
      complaintId: complaint.id,
      complaint: {
        id: complaint.id,
        userType: complaint.userType,
        name: complaint.name,
        department: complaint.department,
        year: complaint.year,
        category: complaint.category,
        title: complaint.title,
        description: complaint.description,
        fileUrls: complaint.fileUrls,
        status: complaint.status,
        submittedAt: complaint.submittedAt
      }
    });

  } catch (error: any) {
    console.error('Error submitting complaint:', error);
    
    // Handle validation errors
    if (error.name === 'ValidationError') {
      const validationErrors = Object.values(error.errors).map((err: any) => ({
        field: err.path,
        message: err.message
      }));
      
      return res.status(400).json({
        message: 'Validation error',
        errors: validationErrors
      });
    }

    // Handle duplicate key errors
    if (error.code === 11000) {
      return res.status(400).json({
        message: 'Complaint ID already exists. Please try again.'
      });
    }

    res.status(500).json({ 
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Get complaint by ID
router.get('/:id', async (req, res) => {
  try {
    const complaint = await Complaint.findOne({ id: req.params.id });
    
    if (!complaint) {
      return res.status(404).json({ 
        message: 'Complaint not found' 
      });
    }

    res.json(complaint);
  } catch (error) {
    console.error('Error fetching complaint:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
});

// Get all complaints (for admin)
router.get('/', async (req, res) => {
  try {
    const { page = 1, limit = 10, status, category, department } = req.query;
    
    const filter: any = {};
    if (status) filter.status = status;
    if (category) filter.category = category;
    if (department) filter.department = department;

    const complaints = await Complaint.find(filter)
      .sort({ createdAt: -1 })
      .limit(Number(limit) * 1)
      .skip((Number(page) - 1) * Number(limit));

    const total = await Complaint.countDocuments(filter);

    res.json({
      complaints,
      totalPages: Math.ceil(total / Number(limit)),
      currentPage: Number(page),
      total
    });
  } catch (error) {
    console.error('Error fetching complaints:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
});

// Update complaint status (admin only)
router.put('/:id/status', async (req, res) => {
  try {
    const { status } = req.body;
    
    if (!status || !['pending', 'in-progress', 'resolved', 'rejected'].includes(status)) {
      return res.status(400).json({ 
        message: 'Invalid status' 
      });
    }

    const complaint = await Complaint.findOneAndUpdate(
      { id: req.params.id },
      { 
        status,
        updatedAt: new Date()
      },
      { new: true }
    );

    if (!complaint) {
      return res.status(404).json({ 
        message: 'Complaint not found' 
      });
    }

    res.json({
      message: 'Complaint status updated successfully',
      complaint
    });
  } catch (error) {
    console.error('Error updating complaint status:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: process.env.NODE_ENV === 'development' ? error : undefined
    });
  }
});

export default router;
